// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::chassisLeftFront;
std::shared_ptr<SpeedController> RobotMap::chassisLeftRear;
std::shared_ptr<SpeedController> RobotMap::chassisRightFront;
std::shared_ptr<SpeedController> RobotMap::chassisRightRear;
std::shared_ptr<RobotDrive> RobotMap::chassisDrive;
std::shared_ptr<SpeedController> RobotMap::shooterShooterMotor;
std::shared_ptr<SpeedController> RobotMap::shooterLoaderMotor;
std::shared_ptr<Encoder> RobotMap::shooterEncoder;
std::shared_ptr<SpeedController> RobotMap::intakeIntakeMotor;
std::shared_ptr<SpeedController> RobotMap::winchWinchMotor;
std::shared_ptr<DigitalInput> RobotMap::winchPhotoEye;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<ADXRS450_Gyro> RobotMap::chassisGyro; //%NE
std::shared_ptr<PowerDistributionPanel> RobotMap::powerDistributionPanel;

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    chassisLeftFront.reset(new Talon(0));
    lw->AddActuator("Chassis", "LeftFront", std::static_pointer_cast<Talon>(chassisLeftFront));
    
    chassisLeftRear.reset(new Talon(1));
    lw->AddActuator("Chassis", "LeftRear", std::static_pointer_cast<Talon>(chassisLeftRear));
    
    chassisRightFront.reset(new Talon(2));
    lw->AddActuator("Chassis", "RightFront", std::static_pointer_cast<Talon>(chassisRightFront));
    
    chassisRightRear.reset(new Talon(3));
    lw->AddActuator("Chassis", "RightRear", std::static_pointer_cast<Talon>(chassisRightRear));
    
    chassisDrive.reset(new RobotDrive(chassisLeftFront, chassisLeftRear,
              chassisRightFront, chassisRightRear));
    
    chassisDrive->SetSafetyEnabled(true);
        chassisDrive->SetExpiration(0.1);
        chassisDrive->SetSensitivity(0.5);
        chassisDrive->SetMaxOutput(1.0);

        chassisDrive->SetInvertedMotor(RobotDrive::kFrontRightMotor, true);
        chassisDrive->SetInvertedMotor(RobotDrive::kRearRightMotor, true);
    shooterShooterMotor.reset(new Talon(4));
    lw->AddActuator("Shooter", "ShooterMotor", std::static_pointer_cast<Talon>(shooterShooterMotor));
    
    shooterLoaderMotor.reset(new Talon(5));
    lw->AddActuator("Shooter", "LoaderMotor", std::static_pointer_cast<Talon>(shooterLoaderMotor));
    
    shooterEncoder.reset(new Encoder(0, 1, false, Encoder::k4X));
    lw->AddSensor("Shooter", "Encoder", shooterEncoder);
    shooterEncoder->SetDistancePerPulse(1.0);
    shooterEncoder->SetPIDSourceType(PIDSourceType::kRate);
    intakeIntakeMotor.reset(new Talon(6));
    lw->AddActuator("Intake", "IntakeMotor", std::static_pointer_cast<Talon>(intakeIntakeMotor));
    
    winchWinchMotor.reset(new Talon(7));
    lw->AddActuator("Winch", "WinchMotor", std::static_pointer_cast<Talon>(winchWinchMotor));
    
    winchPhotoEye.reset(new DigitalInput(2));
    lw->AddSensor("Winch", "PhotoEye", winchPhotoEye);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    chassisGyro.reset(new ADXRS450_Gyro(SPI::kOnboardCS0));// %NE
      lw->AddSensor("Chassis", "Gyro", chassisGyro);

      powerDistributionPanel.reset(new PowerDistributionPanel());
      lw->AddSensor("Robot","power distribution",powerDistributionPanel);


}
 const PowerDistributionPanel& RobotMap::getPowerDistributionPanel(){
	 return *powerDistributionPanel.get();
}

