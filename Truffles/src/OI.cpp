// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/AutonomousCommand.h"
#include "Commands/DriveWithJoystick.h"
#include "Commands/RunIntake.h"
#include "Commands/RunShooter.h"
#include "Commands/RunWinch.h"
#include "Commands/GearCatchCommands.h"
#include "Commands/RunHexapus.h"

class HexapusButton : public JoystickButton {
    // bool buttonReleased = false;
    bool jamDetected = false;
public:
    HexapusButton(GenericHID *joystick, int buttonNumber) : JoystickButton(joystick, buttonNumber) {}

    bool Get() override {
        bool buttonPressed = JoystickButton::Get();
        if (buttonPressed) {
            if (jamDetected) {
                return false;
            } else {
                bool jam = Robot::shooter->isHexapusJammed();
                if (jam) {
                    jamDetected = true;
                    return false;
                }
            }
        } else {
            if (jamDetected) {
                jamDetected = false;
            }
            return JoystickButton::Get();
        }
        //shouldnt get here:
        return JoystickButton::Get() && !Robot::shooter->isHexapusJammed();
    }

};




// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

/**
 * Operator Input Setup
 * ====================
 *
 * Driver Joystick
 * ------------------
 * 	-Toggle pickup: button 2
 * 	-switch robot front: button 1
 * 	-rope climb: button 5 - go up while held, hold on release
 * 	-driving: x,y,twist
 *
 * 	Secondary Joystick
 * 	---------------------
 * 	-shoot(toggle hexapus): button 1
 * 	-shoot(toggle flywheel): button 2
 * 	-shoot(flywheel speed): throttle
 * 	-shoot(hexapus unjam/go backwards a little): button 4
 * 	-Gear Catch Toggle(in/out): button 3
 *
 */
//OI::OI() {
// Process operator interface input here.
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
//    driverJoystick.reset(new Joystick(0));
//    shooterJoystick.reset(new Joystick(1));

//    winchUpSlow.reset(new JoystickButton(driverJoystick.get(), 8));
//    winchUpSlow->WhileHeld(new RunWinch(1.0));
//    intakeButton.reset(new JoystickButton(driverJoystick.get(), 3));
//    intakeButton->WhileHeld(new RunIntake(-0.6));
////    winchDown.reset(new JoystickButton(driverJoystick.get(), 9));
////    winchDown->WhenPressed(new RunWinch(-1));
//    winchUp.reset(new JoystickButton(driverJoystick.get(), 7));
//    winchUp->WhileHeld(new RunWinch(0.3));
////
//    shootButton.reset(new JoystickButton(driverJoystick.get(), 2));
//    shootButton->WhileHeld(new RunShooter());
////
//    loadButton.reset(new HexapusButton(driverJoystick.get(), 1));
//    loadButton->WhileHeld(new RunHexapus(0.75));
//    loadButton->WhenReleased(new ReAddDefaultHexapusCommand());
//
//    gearAcceptIn.reset(new JoystickButton(driverJoystick.get(), 5));
//    gearAcceptIn->WhenPressed(new GearCatchIn());
//
//    gearAcceptOut.reset(new JoystickButton(driverJoystick.get(), 6));
//    gearAcceptOut->WhenPressed(new GearCatchOut());
//
//    RunHexapus *hexapus = new RunHexapus(-0.5);
//    hexapus->timeOut(0.25);
//    unjamButton.reset(new JoystickButton(driverJoystick.get(), 7));
//    unjamButton->WhenPressed(hexapus);

// initSmartDashboardCommands();

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

//}

void OI::initSmartDashboardCommands() {
    // SmartDashboard Buttons
    SmartDashboard::PutData("RunIntake: in", new RunIntake(1));
    SmartDashboard::PutData("RunIntake: out", new RunIntake(-1));
    SmartDashboard::PutData("RunWinch: down", new RunWinch(-1));
    SmartDashboard::PutData("RunWinch: up", new RunWinch(1));
    SmartDashboard::PutData("RunWinch: upslow", new RunWinch(0.3));
    SmartDashboard::PutData("RunShooter", new RunShooter());
    SmartDashboard::PutData("DriveWithJoystick", new DriveWithJoystick());
    SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());
    SmartDashboard::PutData("Hexapus", new RunHexapus(1.0));
//
    SmartDashboard::PutData("Gear catch: in (undriven)", new GearCatchInUnpowered());
    SmartDashboard::PutData("Gear catch: in", new GearCatchIn());
    SmartDashboard::PutData("Gear catch: out", new GearCatchOut());
}

OI::OI() {
    initSmartDashboardCommands();

}

Btn &OI::ballIntakeButton() const {
    return const_cast<Btn &>(driverJoystick.ballIntakeButton);
}

Btn &OI::robotFrontToggleButton() const {
    return const_cast<Btn &>(driverJoystick.robotFrontToggleButton);
}

Btn &OI::ropeClimbButton() const {
    return const_cast<Btn &>(driverJoystick.ropeClimbButton);
}

Btn &OI::hexapusToggleButton() const {
    return const_cast<Btn &>(shooterJoystick.flywheelToggleButton);
}

Btn &OI::flywheelToggleButton() const {
    return const_cast<Btn &>(shooterJoystick.flywheelToggleButton);
}

Btn &OI::unjamHexapusButton() const {
    return const_cast<Btn &>(shooterJoystick.unjamHexapusButton);
}
Btn &OI::gearCatchToggleButton() const {
    return const_cast<Btn &>(shooterJoystick.gearCatchToggleButton);
}



//ReAddDefaultHexapusCommand::ReAddDefaultHexapusCommand() : InstantCommand() {}
//
//void ReAddDefaultHexapusCommand::Exeute() {
//
//    // Robot::oi->intakeButton->WhileHeld(new RunHexapus(0.75));
//}


Btn::Btn(Joystick *stick, int btn) : Button(), joystick(stick), buttonNumber(btn) {

}

bool Btn::Get() {
    return isPressed();
}

bool Btn::isPressed() {
    return joystick->GetRawButton(buttonNumber);
}

DriverJoyStick::DriverJoyStick() : Joystick(0),
                                   ballIntakeButton{this, 2},
                                   robotFrontToggleButton{this, 1},
                                   ropeClimbButton{this, 5} {}


ShooterJoystick::ShooterJoystick() : Joystick(1),
                                     hexapusToggleButton{this, 1},
                                     flywheelToggleButton{this, 2},
                                     unjamHexapusButton{this, 4},
                                     gearCatchToggleButton{this, 3} {}
