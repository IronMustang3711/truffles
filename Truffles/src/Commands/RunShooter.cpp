// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RunShooter.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

RunShooter::RunShooter(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooter.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void RunShooter::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void RunShooter::Execute() {
	 auto shooterController = RobotMap::shooterController;
    shooterController->SetFeedbackDevice(CANTalon::QuadEncoder);
    shooterController->ConfigEncoderCodesPerRev(20);
    shooterController->SetSensorDirection(false);
    shooterController->SetPosition(0);
    shooterController->SetControlMode(CANSpeedController::kSpeed);

    // Nominal Closed-Loop Output: Promotes the minimal or weakest motor-output
    // during closed-loop.
    shooterController->ConfigNominalOutputVoltage(+0., -2.0);
    shooterController->ConfigPeakOutputVoltage(-2.0, -15.0);
    /* set the allowable closed-loop error,
     * Closed-Loop output will be neutral within this range.
     * See Table in Section 17.2.1 for native units per rotation.
     */
    shooterController->SetAllowableClosedLoopErr(0); /* always servo */
    shooterController->SetF(1.45);
    shooterController->SetP(1.0);
    shooterController->SetI(0.0);
    shooterController->SetD(100.0);
    shooterController->SetCloseLoopRampRate(0.0);
   // shooterController.SetIzone(60);

    auto stick = Robot::oi->getJoystick();

    // sliderValue in [0,1]
    double sliderValue = (-stick->GetRawAxis(3) + 1) * 0.5;
    // target in [-5227,0];
   double target = -5227.0 * log10(9.0 * sliderValue + 1.0);

    shooterController->Set(target);
}

// Make this return true when this Command no longer needs to run execute()
bool RunShooter::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void RunShooter::End() {
	Robot::shooter->runShooterMotor(0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void RunShooter::Interrupted() {
	End();
}
