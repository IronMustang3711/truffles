// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Chassis.h"
#include "../RobotMap.h"
#include "../Commands/DriveWithJoystick.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Chassis::Chassis() : Subsystem("Chassis") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftFront = RobotMap::leftFrontController;
    leftRear = RobotMap::leftRearController;
    rightFront = RobotMap::rightFrontController;
    rightRear = RobotMap::rightRearController;
    drive = RobotMap::chassisDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

}

void Chassis::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new DriveWithJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void Chassis::MecanumDrive(std::shared_ptr<Joystick> stickPosition) {
	float x = stickPosition->GetX(); // this is joystick left/right
	float y = stickPosition->GetY(); // this is forward/backward
	float z = stickPosition->GetZ(); // this is twist left/right

	// following makes controls less sensitive for small moves
	x = pow(x, 3);
	y = pow(y, 3);
	z = pow(z, 3) * 0.3; // limit to 10% to make it easier to control

	drive->MecanumDrive_Cartesian(x, y, z); //,gyro->GetAngle());//%THIS MAY BE A DIASTER
}
void Chassis::AutoDrive(float fwdSpeed, float rotateSpeed) { //%NE
	drive->MecanumDrive_Cartesian(0, -fwdSpeed, rotateSpeed);
}

