// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "Shooter.h"
#include "../RobotMap.h"
using namespace frc;
Shooter::Shooter() : Subsystem("Shooter") {
  shooterController = RobotMap::shooterController;

  initShooter();
}

double map(double in,
           double inputMin,
           double inputMax,
           double outputMin,
           double outputMax) {
  return outputMin +
         (outputMax - outputMin) * ((in - inputMin) / (inputMax - inputMin));
}

void Shooter::initShooter() {
  shooterController->SetFeedbackDevice(CANTalon::QuadEncoder);
  shooterController->ConfigEncoderCodesPerRev(20);
  shooterController->SetSensorDirection(true);
  shooterController->SetPosition(0);
  shooterController->SetControlMode(CANSpeedController::ControlMode::kSpeed);
  shooterController->SetClosedLoopOutputDirection(false);
  shooterController->ConfigNominalOutputVoltage(+0., -0.0);
  shooterController->ConfigPeakOutputVoltage(12.0, -12.0);
  shooterController->SetAllowableClosedLoopErr(0); /* always servo */
  shooterController->SetF(1.45);
  shooterController->SetP(1.0);
  shooterController->SetI(0.0);
  shooterController->SetD(0.0);
  shooterController->SetCloseLoopRampRate(0.0);
}
const double OFF_SPEED = 10.0;
void Shooter::InitDefaultCommand() {}

void Shooter::run(double speed) {
  shooterController->Set(speed);

  double sp = getSetPoint();
  double vel = getVelocity();
  double err = getClosedLoopError();
  double out = getOutput();

  if (speed == OFF_SPEED) {
    transition(OFF);
  }
  switch (state) {
    case OFF:
      if (speed != OFF_SPEED) {
        transition(INIT);
      }
      break;

    case INIT:
      if (err <= 20.0) {
        transition(STEADY);
      } else if (err - prevClosedLoopError > 50.0 && sp == prevSetPoint) {
        transition(SHOOT);
      }
      break;

    case SHOOT:
      if ((prevVelocity - vel < 10 ||
           std::abs(prevClosedLoopError - err) < 5.0) &&
          prevSetPoint == sp) {
        transition(BANG_BANG);
      }
      break;

    case BANG_BANG:
      if (err <= 20.0) {
        transition(STEADY);
      } else if (err - prevClosedLoopError > 20.0 && sp == prevSetPoint) {
        transition(SHOOT);
      }
      break;

    case STEADY:
      if (prevVelocity - vel > 50 && prevSetPoint == sp) {
        transition(SHOOT);
      }
      break;
  }
  prevSetPoint = sp;
  prevVelocity = vel;
  prevClosedLoopError = err;
  prevOutput = out;
}

void Shooter::runShooterMotor(double input) {
  double target = input < 0.1 ? (10 + 31900.0 * input)
                              : map(input, 0.1, 1.0, 3200.0, 4200.0);

  run(target);

  // shooterController->Set(target);

  SmartDashboard::PutString("shooter state", StateName(state));
  SmartDashboard::PutNumber("shooter output", prevOutput);
  SmartDashboard::PutNumber("shooter:target", target);
  // SmartDashboard::PutNumber("shooter:input", input);
  SmartDashboard::PutNumber("shooter:speed", prevVelocity);
  SmartDashboard::PutNumber("Shooter:error", prevClosedLoopError);
}

double Shooter::getSetPoint() {
  return shooterController->GetSetpoint();
}

double Shooter::getVelocity() {
  return shooterController->GetSpeed();
}

double Shooter::getClosedLoopError() {
  return shooterController->GetClosedLoopError();
}

double Shooter::getOutput() {
  return shooterController->GetOutputVoltage() /
         shooterController->GetBusVoltage();
}

std::string Shooter::StateName(Shooter::State s) {
  switch (s) {
    case OFF:
      return "OFF";
    case INIT:
      return "INIT";
    case SHOOT:
      return "SHOOT";
    case BANG_BANG:
      return "BANG_BANG";
    case STEADY:
      return "STEADY";
  }
  return "butts";
}

void Shooter::transition(Shooter::State newState) {
  if (state == OFF && newState == INIT) {
    initShooter();
  }
  if (newState == BANG_BANG) {
    shooterController->SetD(0);
  }
  if (state == BANG_BANG) {
    shooterController->SetD(100.0);
  }

  state = newState;
}
